---
- include: variables.yml

- name: Ensure the directory for the plugins exists
  file:
    state: directory
    dest: "{{ vim_vundle_plugins_path }}"
    owner: "{{ vim_vundle_plugins_user }}"
    mode: "{{ vim_vundle_plugins_mode }}"

- name: Ensure vundle is installed and up to date
  git:
    repo: "{{ vim_vundle_plugins_repo }}"
    dest: "{{ vim_vundle_plugins_path }}/Vundle.vim"
    accept_hostkey: True
    clone: True
    force: True
    update: False

- name: Extract the list of plugins
  shell: grep '^Plugin' "{{ vim_vundle_plugins_vimrc }}"
  register: vim_vundle_plugins_list
  changed_when: False

- name: Dump plugins into a temporary config
  template:
    src: vimrc.j2
    dest: "{{ vim_vundle_plugins_tmp_config }}"
    owner: "{{ vim_vundle_plugins_user }}"
  changed_when: False

- name: Ensure all plugins are installed
  shell: >
    {{ vim_vundle_plugins_vim_binary }} -u "{{ vim_vundle_plugins_tmp_config }}" -c "PluginInstall" -c quitall

- name: Ensure all plugins are up to date
  shell: >
    {{ vim_vundle_plugins_vim_binary }} -u "{{ vim_vundle_plugins_tmp_config }}" -c "PluginUpdate" -c quitall
  when: vim_vundle_plugins_perform_update

- name: Ensure that old plugins are removed
  shell: >
    {{ vim_vundle_plugins_vim_binary }} -u "{{ vim_vundle_plugins_tmp_config }}" -c "PluginClean!" -c quitall
  when: vim_vundle_plugins_perform_clean

- name: Ensure correct permissions for the plugins
  file:
    path: "{{ vim_vundle_plugins_path }}"
    mode: "{{ vim_vundle_plugins_mode }}"
    owner: "{{ vim_vundle_plugins_user }}"
    recurse: True
  become: True

- name: Delete the temporary config
  file:
    dest: "{{ vim_vundle_plugins_tmp_config }}"
    state: absent
  changed_when: False
